<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


       <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
              <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
              <property name="ignoreResourceNotFound" value="true"/>
              <property name="locations">
                     <list>
                            <!-- 标准配置 -->
                            <value>classpath:application.properties</value>
                            <value>classpath:hibernate.properties</value>
                     </list>
              </property>
       </bean>

       <!-- 打开Spring的Annotation支持 -->
       <context:annotation-config/>
       <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
       <context:component-scan base-package="cn.geobeans.*"/>
       <!-- 静态资源(js、image等)的访问 -->
       <mvc:default-servlet-handler/>
       <!-- 可通过注解控制事务 -->
       <tx:annotation-driven/>

       <!-- if you use annotation you must configure following setting -->
       <mvc:annotation-driven>
              <mvc:message-converters register-defaults="true">
                     <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
              </mvc:message-converters>
       </mvc:annotation-driven>


       <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
              <property name="dataSource" ref="dataSource"/>
              <property name="packagesToScan">
                     <list>
                            <value>cn.geobeans.fwzx.model</value>
                            <value>cn.geobeans.org.model</value>
                            <value>cn.geobeans.auth.model</value>
                     </list>
              </property>
              <property name="hibernateProperties">
                     <props>
                            <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                            <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
                            <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
                            <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
                            <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                            <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
                            <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                            <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                            <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                            <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
                            <prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
                            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                            <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
                     </props>
              </property>
       </bean>

       <!-- 配置数据源和BoneCP连接池 -->
       <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
              <property name="driverClass" value="${connection.driverClass}" />
              <property name="jdbcUrl" value="${connection.jdbcUrl}" />
              <property name="username" value="${connection.username}"/>
              <property name="password" value="${connection.password}"/>
              <property name="idleConnectionTestPeriodInMinutes" value="${connection.idleConnectionTestPeriodInMinutes}"/>
              <property name="idleMaxAgeInMinutes" value="${connection.idleMaxAgeInMinutes}"/>
              <property name="maxConnectionsPerPartition" value="${connection.maxConnectionsPerPartition}"/>
              <property name="minConnectionsPerPartition" value="${connection.minConnectionsPerPartition}"/>
              <property name="partitionCount" value="${connection.partitionCount}"/>
              <property name="acquireIncrement" value="${connection.acquireIncrement}"/>
              <property name="statementsCacheSize" value="${connection.statementsCacheSize}"/>
       </bean>


       <!--&lt;!&ndash; (事务管理)transaction manager, use JtaTransactionManager for global tx &ndash;&gt;-->
       <!--<bean id="transactionManager"-->
             <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
              <!--<property name="dataSource" ref="dataSource"/>-->
       <!--</bean>-->


       <!-- 配置Spring的事务处理 -->
       <!-- 创建事务管理器-->
       <bean id="txManager"
             class="org.springframework.orm.hibernate4.HibernateTransactionManager">
              <property name="sessionFactory" ref="sessionFactory"/>
       </bean>

       <!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
       <aop:config>
              <!-- 设置pointCut表示哪些方法要加入事务处理 -->
              <!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
                  就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
              <aop:pointcut id="allMethods" expression="execution(* cn.geobeans.fwzx.dao.impl.*.*(..))"/>
              <!-- 通过advisor来确定具体要加入事务控制的方法 -->
              <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
       </aop:config>
       <!-- 配置哪些方法要加入事务控制 -->
       <tx:advice id="txAdvice" transaction-manager="txManager">
              <tx:attributes>
                     <!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
                     <tx:method name="*" propagation="REQUIRED" read-only="true"/>
                     <!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
                     <tx:method name="add*" propagation="REQUIRED"/>
                     <tx:method name="del*" propagation="REQUIRED"/>
                     <tx:method name="update*" propagation="REQUIRED"/>
                     <tx:method name="save*" propagation="REQUIRED"/>
                     <tx:method name="clear*" propagation="REQUIRED"/>
                     <tx:method name="empty*" propagation="REQUIRED"/>
                     <tx:method name="init*" propagation="REQUIRED"/>
              </tx:attributes>
       </tx:advice>

       <!-- I18N -->
       <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
              <property name="defaultLocale" value="zh_CN"/>
       </bean>
       <bean id="localeChangeInterceptor"
             class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
              <property name="paramName" value="language"/>
       </bean>


       <bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping">
              <property name="interceptors">
                     <list>
                            <ref bean="localeChangeInterceptor"/>
                     </list>
              </property>
       </bean>
       <!-- I18N END -->

       <bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
              <property name="basename" value="views"/>
       </bean>

       <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
              <property name="basename" value="views"></property>
       </bean>


       <bean id="InternalViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
              <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
              <property name="prefix" value="/WEB-INF/content/"/>
              <property name="suffix" value=".html"/>
       </bean>

       <!-- 文件上传 -->
       <bean id="multipartResolver"
             class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
              <property name="defaultEncoding" value="utf-8"></property>
              <property name="maxUploadSize" value="10485760000"></property>
              <property name="maxInMemorySize" value="40960"></property>
       </bean>



       <!--配置需要执行任务的列表-->
       <!--<task:scheduled-tasks>-->
              <!--<task:scheduled ref="taskJob" method="checkProjectStateTask" cron = "*/${check-project-period} * * * * ?"/>-->
       <!--</task:scheduled-tasks>-->

       <!--动路路由的节点-->
       <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring"/>
</beans>